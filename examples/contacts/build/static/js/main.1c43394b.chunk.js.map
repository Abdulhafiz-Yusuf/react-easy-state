{"version":3,"sources":["appStore.js","Contact.jsx","ContactCreator.jsx","App.jsx","index.js"],"names":["appStore","store","contacts","addContact","contact","name","email","push","deleteContact","idx","indexOf","splice","Contact","onEdit","compStore","editing","onDelete","props","onSave","Object","assign","currentContact","onCancel","onChange","ev","target","value","this","className","autoFocus","onClick","Component","view","ContactCreator","newContact","placeholder","map","key","ReactDOM","render","App","document","getElementById"],"mappings":"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","file":"static/js/main.1c43394b.chunk.js","sourcesContent":["import { store } from '@risingstack/react-easy-state';\n\n// store the central data and logic of the application in a global app store\n// use 'appStore' instead of 'this' in the store methods to make them passable as callbacks\nconst appStore = store({\n  contacts: [],\n  addContact(contact) {\n    contact.name = contact.name || 'Placeholder';\n    contact.email = contact.email || 'Placeholder';\n    appStore.contacts.push(contact);\n  },\n  deleteContact(contact) {\n    const idx = appStore.contacts.indexOf(contact);\n    appStore.contacts.splice(idx, 1);\n  },\n});\n\nexport default appStore;\n","import React, { Component } from 'react';\nimport { view, store } from '@risingstack/react-easy-state';\nimport appStore from './appStore';\n\nclass Contact extends Component {\n  constructor({ contact }) {\n    super();\n\n    // save internal utility data in component store instead of the global store\n    // editing is boolean meta flag, which indicates if the contact is currently edited\n    // currentContact is a temporary state of the contact during editing, which can be saved or cancelled\n    this.compStore = store({\n      currentContact: { ...contact },\n      editing: false,\n    });\n  }\n\n  onEdit = () => {\n    this.compStore.editing = true;\n  };\n\n  onDelete = () => {\n    appStore.deleteContact(this.props.contact);\n  };\n\n  // transfer finalized changes from the component store to the app store\n  onSave = () => {\n    // mutating the store with Object.assign is possible, but it is generally hard to reason about and debug\n    Object.assign(this.props.contact, this.compStore.currentContact);\n    this.compStore.editing = false;\n  };\n\n  // cancel changes by reverting to data from the main store\n  onCancel = () => {\n    // mutating the store with Object.assign is possible, but it is generally hard to reason about and debug\n    Object.assign(this.compStore.currentContact, this.props.contact);\n    this.compStore.editing = false;\n  };\n\n  onChange = ev => {\n    this.compStore.currentContact[ev.target.name] = ev.target.value;\n  };\n\n  // render is triggered whenever the relevant parts of the component store, app store or props change\n  render() {\n    const { onChange, onSave, onCancel, onEdit, onDelete } = this;\n    const { currentContact, editing } = this.compStore;\n    const { contact } = this.props;\n\n    if (!editing) {\n      return (\n        <tr className=\"contact-display\">\n          <td>{contact.name}</td>\n          <td>{contact.email}</td>\n          <td>\n            <button onClick={onEdit}>\n              <i className=\"zmdi zmdi-edit\" />\n            </button>\n            <button onClick={onDelete}>\n              <i className=\"zmdi zmdi-delete\" />\n            </button>\n          </td>\n        </tr>\n      );\n    }\n\n    return (\n      <tr className=\"contact-editor\">\n        <td>\n          <input\n            name=\"name\"\n            value={currentContact.name}\n            onChange={onChange}\n            autoFocus\n          />\n        </td>\n        <td>\n          <input\n            name=\"email\"\n            value={currentContact.email}\n            onChange={onChange}\n          />\n        </td>\n        <td>\n          <button onClick={onSave}>\n            <i className=\"zmdi zmdi-save\" />\n          </button>\n          <button onClick={onCancel}>\n            <i className=\"zmdi zmdi-close\" />\n          </button>\n        </td>\n      </tr>\n    );\n  }\n}\n\n// wrap the component with view() before exporting it\nexport default view(Contact);\n","import React, { Component } from 'react';\nimport { view, store } from '@risingstack/react-easy-state';\nimport appStore from './appStore';\n\nclass ContactCreator extends Component {\n  // save internal utility data in component store, instead of the app store\n  // newContact is the skeleton for the next contact before it is added to the list\n  compStore = store({\n    newContact: { name: '', email: '' },\n  });\n\n  // transfer finalized contact from the component store to the app store\n  addContact = () => {\n    appStore.addContact(this.compStore.newContact);\n    this.compStore.newContact = { name: '', email: '' };\n  };\n\n  onChange = ev => {\n    const { newContact } = this.compStore;\n    newContact[ev.target.name] = ev.target.value;\n  };\n\n  // render is triggered whenever the relevant parts of the component store or app store change\n  render() {\n    const { addContact, onChange } = this;\n    const { newContact } = this.compStore;\n\n    return (\n      <tr className=\"contact-creator\">\n        <td>\n          <input\n            name=\"name\"\n            value={newContact.name}\n            onChange={onChange}\n            placeholder=\"Contact name...\"\n          />\n        </td>\n        <td>\n          <input\n            name=\"email\"\n            value={newContact.email}\n            onChange={onChange}\n            placeholder=\"Contact email...\"\n          />\n        </td>\n        <td>\n          <button onClick={addContact}>Add Contact</button>\n        </td>\n      </tr>\n    );\n  }\n}\n\n// wrap the component with view() before exporting it\nexport default view(ContactCreator);\n","import React from 'react';\nimport { view } from '@risingstack/react-easy-state';\nimport Contact from './Contact';\nimport ContactCreator from './ContactCreator';\nimport appStore from './appStore';\n\n// this re-renders whenever the appStore.contacts array changes (elements pushed or deleted)\nexport default view(() => {\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Email</th>\n          <th>Action</th>\n        </tr>\n      </thead>\n      <tbody>\n        {appStore.contacts.map(contact => (\n          <Contact contact={contact} key={contact.email} />\n        ))}\n        <ContactCreator />\n      </tbody>\n    </table>\n  );\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}