{"version":3,"sources":["todosStore.js","TodoItem.jsx","App.jsx","index.js"],"names":["todos","store","all","filter","length","todo","completed","every","forEach","create","title","push","remove","id","splice","toggle","toggleAll","allCompleted","clearCompleted","active","view","itemClass","classNames","className","type","checked","onChange","onClick","changeFilter","ev","target","value","createTodo","keyCode","isEmpty","hasCompleted","todosClass","selected","completedClass","activeClass","onKeyUp","placeholder","autoFocus","htmlFor","map","idx","TodoItem","key","ReactDOM","render","App","document","getElementById"],"mappings":"8OAIMA,EAAQC,YAAM,CAClBC,IAAK,GACLC,OAAQ,MACR,cACE,OAA4B,IAArBH,EAAME,IAAIE,QAEnB,gBACE,OAAOJ,EAAME,IAAIC,QAAO,SAAAE,GAAI,OAAIA,EAAKC,cAEvC,mBACE,OAAkC,IAA3BN,EAAMM,UAAUF,QAEzB,mBACE,OAAOJ,EAAME,IAAIK,OAAM,SAAAF,GAAI,OAAIA,EAAKC,cAEtC,iBAAiBA,GACfN,EAAME,IAAIM,SAAQ,SAAAH,GAChBA,EAAKC,UAAYA,MAGrB,aACE,OAAON,EAAME,IAAIC,QAAO,SAAAE,GAAI,OAAKA,EAAKC,cAExCG,OAvBkB,SAuBXC,GACLV,EAAME,IAAIS,KAAK,CAAED,WAEnBE,OA1BkB,SA0BXC,GACLb,EAAME,IAAIY,OAAOD,EAAI,IAEvBE,OA7BkB,SA6BXF,GACL,IAAMR,EAAOL,EAAME,IAAIW,GACvBR,EAAKC,WAAaD,EAAKC,WAEzBU,UAjCkB,WAkChBhB,EAAMiB,cAAgBjB,EAAMiB,cAE9BC,eApCkB,WAqChBlB,EAAME,IAAMF,EAAMmB,UAIPnB,ICvCAoB,eAAK,YAAuC,IAApCP,EAAmC,EAAnCA,GAAIH,EAA+B,EAA/BA,MAA+B,IAAxBJ,iBAAwB,SAClDe,EAAYC,IAAW,CAAEF,MAAM,EAAMd,cAE3C,OACE,wBAAIiB,UAAWF,GACb,2BACEE,UAAU,SACVC,KAAK,WACLC,QAASnB,EACToB,SAAU,kBAAM1B,EAAMe,OAAOF,MAE/B,+BAAQH,GACR,4BAAQiB,QAAS,kBAAM3B,EAAMY,OAAOC,IAAKU,UAAU,gBCTzD,SAASK,EAAaC,GACpB7B,EAAMG,OAAS0B,EAAGC,OAAOC,MAI3B,SAASC,EAAWH,GACC,KAAfA,EAAGI,SAAkBJ,EAAGC,OAAOC,QACjC/B,EAAMS,OAAOoB,EAAGC,OAAOC,OACvBF,EAAGC,OAAOC,MAAQ,IAKPX,mBAAK,WAAO,IAEvBc,EAOElC,EAPFkC,QACAC,EAMEnC,EANFmC,aACAlB,EAKEjB,EALFiB,aACAE,EAIEnB,EAJFmB,OACAhB,EAGEH,EAHFG,OACAa,EAEEhB,EAFFgB,UACAE,EACElB,EADFkB,eAGIkB,EAAad,IAAW,CAAEe,SAAqB,QAAXlC,IACpCmC,EAAiBhB,IAAW,CAChCe,SAAqB,cAAXlC,IAENoC,EAAcjB,IAAW,CAAEe,SAAqB,WAAXlC,IAE3C,OACE,yBAAKoB,UAAU,WACb,4BAAQA,UAAU,UAChB,qCACA,2BACEiB,QAASR,EACTT,UAAU,WACVkB,YAAY,yBACZC,WAAS,MAIXR,GACA,6BAASX,UAAU,QACjB,2BACEA,UAAU,aACVC,KAAK,WACLC,QAASR,EACTS,SAAUV,IAEZ,2BAAO2B,QAAQ,cAAf,wBACA,wBAAIpB,UAAU,aACXvB,EAAMG,GAAQyC,KAAI,SAACvC,EAAMwC,GAAP,OACjB,kBAACC,EAAD,iBAAczC,EAAd,CAAoBQ,GAAIgC,EAAKE,IAAKF,WAMxCX,GACA,4BAAQX,UAAU,UAChB,0BAAMA,UAAU,cACbJ,EAAOf,OADV,eAGA,yBAAKmB,UAAU,WACb,4BACEA,UAAWa,EACXL,MAAM,MACNJ,QAASC,GAHX,OAOA,4BACEL,UAAWgB,EACXR,MAAM,SACNJ,QAASC,GAHX,UAOA,4BACEL,UAAWe,EACXP,MAAM,YACNJ,QAASC,GAHX,cAQDO,GACC,4BACEZ,UAAU,kBACVI,QAAST,GAFX,wBC5FZ8B,IAASC,OAAO,kBAACC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.0af9c717.chunk.js","sourcesContent":["import { store } from '@risingstack/react-easy-state';\n\n// a complex global store with a lot of derived data (getters and setters)\n// use 'todos' instead of 'this' in the store methods to make them passable as callbacks\nconst todos = store({\n  all: [],\n  filter: 'all',\n  get isEmpty() {\n    return todos.all.length === 0;\n  },\n  get completed() {\n    return todos.all.filter(todo => todo.completed);\n  },\n  get hasCompleted() {\n    return todos.completed.length !== 0;\n  },\n  get allCompleted() {\n    return todos.all.every(todo => todo.completed);\n  },\n  set allCompleted(completed) {\n    todos.all.forEach(todo => {\n      todo.completed = completed;\n    });\n  },\n  get active() {\n    return todos.all.filter(todo => !todo.completed);\n  },\n  create(title) {\n    todos.all.push({ title });\n  },\n  remove(id) {\n    todos.all.splice(id, 1);\n  },\n  toggle(id) {\n    const todo = todos.all[id];\n    todo.completed = !todo.completed;\n  },\n  toggleAll() {\n    todos.allCompleted = !todos.allCompleted;\n  },\n  clearCompleted() {\n    todos.all = todos.active;\n  },\n});\n\nexport default todos;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { view } from '@risingstack/react-easy-state';\nimport todos from './todosStore';\n\n// this is re-rendered whenever the relevant parts of the used data stores change\nexport default view(({ id, title, completed = false }) => {\n  const itemClass = classNames({ view: true, completed });\n\n  return (\n    <li className={itemClass}>\n      <input\n        className=\"toggle\"\n        type=\"checkbox\"\n        checked={completed}\n        onChange={() => todos.toggle(id)}\n      />\n      <label>{title}</label>\n      <button onClick={() => todos.remove(id)} className=\"destroy\" />\n    </li>\n  );\n});\n","import React from 'react';\nimport classNames from 'classnames';\nimport { view } from '@risingstack/react-easy-state';\nimport TodoItem from './TodoItem';\nimport todos from './todosStore';\n\n// these functions mutate the global store\n// abstracting away events and view specific details here is a nice practice\n// the global store methods should only handle pure data\nfunction changeFilter(ev) {\n  todos.filter = ev.target.value;\n}\n\n// create a todo on Enter key press\nfunction createTodo(ev) {\n  if (ev.keyCode === 13 && ev.target.value) {\n    todos.create(ev.target.value);\n    ev.target.value = '';\n  }\n}\n\n// this is re-rendered whenever the relevant parts of the used data stores change\nexport default view(() => {\n  const {\n    isEmpty,\n    hasCompleted,\n    allCompleted,\n    active,\n    filter,\n    toggleAll,\n    clearCompleted,\n  } = todos;\n\n  const todosClass = classNames({ selected: filter === 'all' });\n  const completedClass = classNames({\n    selected: filter === 'completed',\n  });\n  const activeClass = classNames({ selected: filter === 'active' });\n\n  return (\n    <div className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n        <input\n          onKeyUp={createTodo}\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          autoFocus\n        />\n      </header>\n\n      {!isEmpty && (\n        <section className=\"main\">\n          <input\n            className=\"toggle-all\"\n            type=\"checkbox\"\n            checked={allCompleted}\n            onChange={toggleAll}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n          <ul className=\"todo-list\">\n            {todos[filter].map((todo, idx) => (\n              <TodoItem {...todo} id={idx} key={idx} />\n            ))}\n          </ul>\n        </section>\n      )}\n\n      {!isEmpty && (\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {active.length} items left\n          </span>\n          <div className=\"filters\">\n            <button\n              className={todosClass}\n              value=\"all\"\n              onClick={changeFilter}\n            >\n              All\n            </button>\n            <button\n              className={activeClass}\n              value=\"active\"\n              onClick={changeFilter}\n            >\n              Active\n            </button>\n            <button\n              className={completedClass}\n              value=\"completed\"\n              onClick={changeFilter}\n            >\n              Completed\n            </button>\n          </div>\n          {hasCompleted && (\n            <button\n              className=\"clear-completed\"\n              onClick={clearCompleted}\n            >\n              Clear completed\n            </button>\n          )}\n        </footer>\n      )}\n    </div>\n  );\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}