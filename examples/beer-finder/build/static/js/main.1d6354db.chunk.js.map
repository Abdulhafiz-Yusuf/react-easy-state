{"version":3,"sources":["api.js","appStore.js","NavBar.jsx","Beer.jsx","BeerList.jsx","App.jsx","index.js"],"names":["api","axios","create","baseURL","fetchBeers","filter","a","get","params","food","undefined","per_page","data","forEach","fillImage","beer","image_url","indexOf","appStore","store","beers","isLoading","view","className","onRequestSearch","placeholder","autoFocus","LinearProgress","name","description","imageUrl","foodPairing","food_pairing","details","Card","onClick","CardMedia","image","CardContent","map","key","length","ReactDOM","render","App","document","getElementById"],"mappings":"yOAIMA,E,OAAMC,EAAMC,OAAO,CACvBC,QAAS,+BAGJ,SAAeC,EAAtB,kC,4CAAO,WAA0BC,GAA1B,iBAAAC,EAAA,sEACkBN,EAAIO,IAAI,SAAU,CACvCC,OAAQ,CACNC,KAAMJ,QAAUK,EAChBC,SAViB,MAMhB,wBACGC,EADH,EACGA,MAMHC,QAAQC,GAPR,kBAQEF,GARF,4C,sBAWP,SAASE,EAAUC,GACZA,EAAKC,YAAoD,IAAvCD,EAAKC,UAAUC,QAAQ,aAC5CF,EAAKC,UACH,wGClBN,IAAME,EAAWC,YAAM,CACrBC,MAAO,GACDhB,WAFe,SAEJC,GAAS,OAAD,2GACvBa,EAASG,WAAY,EADE,SAEArB,EAAeK,GAFf,OAEvBa,EAASE,MAFc,OAGvBF,EAASG,WAAY,EAHE,gDAOZH,ICKAI,eAXA,kBACb,yBAAKC,UAAU,aACb,kBAAC,IAAD,CACEC,gBAAiBN,EAASd,WAC1BqB,YAAY,oBACZC,WAAS,IAEVR,EAASG,WAAa,kBAACM,EAAA,EAAD,U,2BC2BZL,eAlCF,SAAC,GAKP,IAJLM,EAII,EAJJA,KACAC,EAGI,EAHJA,YACWC,EAEP,EAFJd,UACce,EACV,EADJC,aAEMjB,EAAOI,YAAM,CAAEc,SAAS,IAE9B,OACE,kBAACC,EAAA,EAAD,CACEC,QAAS,WACPpB,EAAKkB,SAAWlB,EAAKkB,SAEvBV,UAAU,SAERR,EAAKkB,SACL,kBAACG,EAAA,EAAD,CAAWC,MAAOP,EAAUP,UAAU,UAExC,kBAACe,EAAA,EAAD,KACE,4BAAKV,GACJb,EAAKkB,QACJ,2BAAIJ,GAEJ,4BACGE,EAAYQ,KAAI,SAAA9B,GAAI,OACnB,wBAAI+B,IAAK/B,GAAOA,YChBfa,eAVE,kBACf,yBAAKC,UAAU,YACXL,EAASE,MAAMqB,OAGfvB,EAASE,MAAMmB,KAAI,SAAAxB,GAAI,OAAI,kBAAC,EAAD,eAAMyB,IAAKzB,EAAKa,MAAUb,OAFrD,4DCHS,oBACb,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCJJ2B,IAASC,OAAO,kBAACC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.1d6354db.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst ITEMS_PER_PAGE = 30;\n\nconst api = axios.create({\n  baseURL: 'https://api.punkapi.com/v2',\n});\n\nexport async function fetchBeers(filter) {\n  const { data } = await api.get('/beers', {\n    params: {\n      food: filter || undefined,\n      per_page: ITEMS_PER_PAGE,\n    },\n  });\n  data.forEach(fillImage);\n  return data;\n}\n\nfunction fillImage(beer) {\n  if (!beer.image_url || beer.image_url.indexOf('keg.png') !== -1) {\n    beer.image_url =\n      'http://www.patternpictures.com/wp-content/uploads/2015/11/PP07301706-Close-up-of-draft-beer-foam.jpg';\n  }\n}\n","import { store } from '@risingstack/react-easy-state';\nimport * as api from './api';\n\n// use 'appStore' instead of 'this' in the store methods to make them passable as callbacks\nconst appStore = store({\n  beers: [],\n  async fetchBeers(filter) {\n    appStore.isLoading = true;\n    appStore.beers = await api.fetchBeers(filter);\n    appStore.isLoading = false;\n  },\n});\n\nexport default appStore;\n","import React from 'react';\nimport { view } from '@risingstack/react-easy-state';\nimport SearchBar from 'material-ui-search-bar';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport appStore from './appStore';\n\n// this is re-rendered whenever the relevant parts of the used data stores change\nconst NavBar = () => (\n  <div className=\"searchbar\">\n    <SearchBar\n      onRequestSearch={appStore.fetchBeers}\n      placeholder=\"Add some food ...\"\n      autoFocus\n    />\n    {appStore.isLoading && <LinearProgress />}\n  </div>\n);\n\nexport default view(NavBar);\n","import React from 'react';\nimport { view, store } from '@risingstack/react-easy-state';\nimport Card from '@material-ui/core/Card';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\n\n// this is re-rendered whenever the relevant parts of the used data stores change\nconst Beer = ({\n  name,\n  description,\n  image_url: imageUrl,\n  food_pairing: foodPairing,\n}) => {\n  const beer = store({ details: false });\n\n  return (\n    <Card\n      onClick={() => {\n        beer.details = !beer.details;\n      }}\n      className=\"beer\"\n    >\n      {!beer.details && (\n        <CardMedia image={imageUrl} className=\"media\" />\n      )}\n      <CardContent>\n        <h3>{name}</h3>\n        {beer.details ? (\n          <p>{description}</p>\n        ) : (\n          <ul>\n            {foodPairing.map(food => (\n              <li key={food}>{food}</li>\n            ))}\n          </ul>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default view(Beer);\n","import React from 'react';\nimport { view } from '@risingstack/react-easy-state';\nimport appStore from './appStore';\nimport Beer from './Beer';\n\n// this is re-rendered whenever the relevant parts of the used data stores change\nconst BeerList = () => (\n  <div className=\"beerlist\">\n    {!appStore.beers.length ? (\n      <h3>No matching beers found!</h3>\n    ) : (\n      appStore.beers.map(beer => <Beer key={beer.name} {...beer} />)\n    )}\n  </div>\n);\n\nexport default view(BeerList);\n","import React from 'react';\nimport NavBar from './NavBar';\nimport BeerList from './BeerList';\n\n// if a component does not use any store, it doesn't have to be wrapped with view()\n// it is safer to wrap everything with view() until you get more comfortable with Easy State\nexport default () => (\n  <>\n    <NavBar />\n    <BeerList />\n  </>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}